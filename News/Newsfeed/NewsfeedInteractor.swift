//
//  NewsfeedInteractor.swift
//  News
//
//  Created by Macbook on 9/6/19.
//  Copyright (c) 2019 iMac GWS. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsfeedBusinessLogic
{
    func makeRequest(request: Newsfeed.Model.Request.RequestType)
}

protocol NewsfeedDataStore
{
    //var name: String { get set }
}

class NewsfeedInteractor: NewsfeedBusinessLogic, NewsfeedDataStore
{
    var presenter: NewsfeedPresentationLogic?
    var worker: NewsfeedWorker?
    
    
    func makeRequest(request: Newsfeed.Model.Request.RequestType)
    {
        worker = NewsfeedWorker()
        
        switch request {
        case .getNewsfeed:
            worker?.getFeed(complation: { [weak self] (revealedPostIds, feedResponse) in
                self?.presenter?.presentData(response: Newsfeed.Model.Response.ResponseType.presentNewsFeed(feed: feedResponse, revealedPostIds: revealedPostIds))
            })
        case .getUser:
            worker?.getUser(complation: { [weak self] (user) in
                self?.presenter?.presentData(response: Newsfeed.Model.Response.ResponseType.presentUserInfo(user: user))
            })
        case .revealPostIds(let postId):
            worker?.revealedPostIds(forPostId: postId, complation: { [weak self] (postIds, feed) in
                self?.presenter?.presentData(response: Newsfeed.Model.Response.ResponseType.presentNewsFeed(feed: feed, revealedPostIds: postIds))
            })
        case .getNextBatch:
            self.presenter?.presentData(response: Newsfeed.Model.Response.ResponseType.presentFooterLoader)
            worker?.getNextBatch(complation: { [weak self] (revealedPostIds, feedResponse) in
                self?.presenter?.presentData(response: Newsfeed.Model.Response.ResponseType.presentNewsFeed(feed: feedResponse, revealedPostIds: revealedPostIds))
            })
        }
    }
}
